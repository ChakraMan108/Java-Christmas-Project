package com.bank.repository;
//Fionn
//Collection of Objects
//save it or fetch
//Read or write

import java.util.ArrayList;

//Increment transaction ID here!!!!!!!!!!!!!!

import java.util.List;

import com.bank.entity.BankAccount;
import com.bank.entity.Operation;
import com.bank.entity.Transaction;

import com.bank.exceptions.RepositoryException;
import com.bank.exceptions.ServiceException;

public class TransactionRepository implements Repository<Transaction> {
    private long lastTransactionNumber;

    public void TransactionNumberManager() {
        this.lastTransactionNumber = 1_000_000_000L;
    }

    private ArrayList<Transaction> transactions;

    public TransactionRepository(ArrayList<Transaction> transactions) {
        this.transactions = transactions;
    }
    
    public List<Transaction> getAll() throws RepositoryException {
        return null;
    }

    //private static long nextId = 0;
    

    //Below auto-generated by VS Studio
  
    public long count() throws RepositoryException {
        // TODO Auto-generated method stub
        return 0;
    }
    
    public List<Transaction> findAll() throws RepositoryException {
        // TODO Auto-generated method stub
        return null;
    }
    
    public Transaction findById(long id) throws ServiceException {
        // TODO Auto-generated method stub
        try {
            return repo.findById(id);
        }
        catch (RepositoryException ex){
            throw new ServiceException("Exception recieved from Repository by the")
        }
        
    }
    
    public long save(Transaction transaction) throws RepositoryException {
        if (!transactions.contains(transaction)) {
            transactions.add(transaction);
            return incrementTransactionNumber();
        }
        else
        {
            transactions.set(transactions.indexOf(transaction), transaction);
            return transaction.getId();
        }
    }

    public long incrementTransactionNumber() {
        lastTransactionNumber++;
        return lastTransactionNumber;
        //return (long) Math.floor(Math.random() * 9_000_000_000L) + 1_000_000_000L;
        //for (long i = 0; i < 5; i++) {
        //}
        
    }


    
}
